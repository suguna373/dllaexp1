import numpy as np
from tensorflow.keras.datasets import mnist 
from tensorflow.keras.models import Sequential 
from tensorflow.keras.layers import Dense, Dropout 
from tensorflow.keras.utils import to_categorical
print("Loading the MNIST dataset...")
(X_train, y_train), (X_test, y_test) = mnist.load_data()
print(f"Training data shape: {X_train.shape}, Training labels shape: {y_train.shape}")
print(f"Testing data shape: {X_test.shape}, Testing labels shape: {y_test.shape}")
print("\nReshaping the input data...")
X_train = X_train.reshape(X_train.shape[0], 28*28)
X_test = X_test.reshape(X_test.shape[0], 28*28)
print(f"Reshaped training data shape: {X_train.shape}")
print(f"Reshaped testing data shape: {X_test.shape}")
print("\nNormalizing the input data...")
X_train = X_train / 255.0
X_test = X_test / 255.0
print("Normalization complete. Pixel values are now between 0 and 1.")
print("\nOne-hot encoding the target variables...")
y_train = to_categorical(y_train)
y_test = to_categorical(y_test)
print(f"Encoded training labels shape: {y_train.shape}")
print(f"Encoded testing labels shape: {y_test.shape}")
print("\nDefining the neural network model...")
model = Sequential()
model.add(Dense(512, input_shape=(784,), activation='relu'))
model.add(Dropout(0.2))
model.add(Dense(512, activation='relu'))
model.add(Dropout(0.2))
model.add(Dense(10, activation='softmax'))
print("Model architecture defined.")
print("\nCompiling the model...")
model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])
print("Model compiled with categorical cross-entropy loss and Adam optimizer.")
print("\nStarting training...")
history = model.fit(X_train, y_train, validation_data=(X_test, y_test), epochs=10, batch_size=128, 
verbose=1)
print("Training complete.")
print("\nEvaluating the model on test data...")
scores = model.evaluate(X_test, y_test, verbose=0)
print(f"Test Accuracy: {scores[1] * 100:.2f}%")
print("\nTraining history:")
print(f"Training accuracy: {history.history['accuracy'][-1]:.2f}")
print(f"Validation accuracy: {history.history['val_accuracy'][-1]:.2f}")
